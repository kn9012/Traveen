package com.ssafy.postComment.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ssafy.postComment.model.PostComment;
import com.ssafy.postComment.model.service.PostCommentService;

import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/post/postComment")
public class PostCommentController {
	private final Logger logger = LoggerFactory.getLogger(PostCommentController.class);
	
	private PostCommentService postCommentService;

	public PostCommentController(PostCommentService postCommentService) {
		super();
		this.postCommentService = postCommentService;
	}
	
	@GetMapping("/list/{idx}")
	@ApiOperation(value = "여행 후기 댓글 목록 조회 API", notes = "여행 후기 댓글 목록을 조회하는 역할을 합니다. /post/postComment/list")
	public ResponseEntity<?> list(@PathVariable(value="idx") int idx) throws Exception {
		logger.debug("list postComment idx : {}", idx);
		List<PostComment> list = postCommentService.listPostComment();
		return ResponseEntity.ok(list);
	}
	
	@GetMapping("/view/{idx}")
	@ApiOperation(value = "여행 후기 댓글 상세 조회 API", notes = "여행 후기 댓글의 idx를 RequestParam으로 받아서 해당 여행 후기 댓글을 상세 조회하는 역할을 합니다. /post/postComment/view")
	public ResponseEntity<?> view(@PathVariable(value="idx") int idx)
			throws Exception {
		logger.debug("view postComment idx : {}", idx);
		PostComment postComment = postCommentService.viewPostComment(idx);
		return ResponseEntity.ok(postComment);
	}
	
	@PostMapping("/regist")
	@ApiOperation(value = "여행 후기 댓글 등록 API", notes = "여행 후기 댓글을 등록하는 역할을 합니다. /post/postComment/regist")
	public ResponseEntity<?> regist(@RequestBody PostComment postComment) throws Exception {
		logger.debug("write postComment : {}", postComment);
		postCommentService.registPostComment(postComment);
		return new ResponseEntity<Void>(HttpStatus.CREATED);
	}
	
	@DeleteMapping("/delete/{idx}")
	@ApiOperation(value = "여행 후기 댓글 삭제 API", notes = "여행 후기 댓글의 idx를 PathVariable으로 받아서 여행 후기 댓글 삭제하는 역할을 합니다. /post/postComment/delete")
	public ResponseEntity<?> delete(@PathVariable("idx") int idx)
			throws Exception {
		logger.debug("delete post idx : {}", idx);
		postCommentService.deletePostComment(idx);
		return ResponseEntity.ok().build();
	}
}
